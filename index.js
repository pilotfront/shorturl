const express = require('express');
const { nanoid } = require('nanoid');
const cors = require('cors');  // CORS middleware
const app = express();
const port = process.env.PORT || 3000;

// In-memory storage for short URLs
const urlDatabase = {};  // Stores shortened URLs, passwords, and click counts

// CORS configuration (allowing Webflow domain)
app.use(cors({
  origin: 'https://www.pilotfront.com', // Webflow domain
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type'],
}));

app.use(express.json());  // Allow the server to handle JSON data

// Root Route
app.get('/', (req, res) => {
  res.send('<h1>Welcome to the URL Shortener!</h1><p>Use POST /shorten to shorten a URL.</p>');
});

// Shorten a URL with password
app.post('/shorten', (req, res) => {
  const { originalUrl, password } = req.body;

  if (!originalUrl || !password) {
    return res.status(400).json({ error: 'You must provide a URL and a password!' });
  }

  const shortId = nanoid(6);  // Generate unique short URL ID
  urlDatabase[shortId] = {
    originalUrl: originalUrl,
    password: password,
    clicks: 0,  // Track number of clicks
  };

  // Send back the shortened URL
  res.json({ shortUrl: `https://${req.headers.host}/${shortId}` });
});

// Redirect to the original URL and count clicks
app.get('/:shortId', (req, res) => {
  const { shortId } = req.params;
  const urlData = urlDatabase[shortId];

  if (!urlData) {
    return res.status(404).json({ error: 'URL not found!' });
  }

  urlData.clicks += 1;  // Increment click count

  // Redirect to the original URL
  res.redirect(urlData.originalUrl);
});

// List URLs generated by a specific password
app.post('/list', (req, res) => {
  const { password } = req.body;

  if (!password) {
    return res.status(400).json({ error: 'You must provide a password!' });
  }

  // Filter URLs by the password
  const userUrls = Object.entries(urlDatabase)
    .filter(([shortId, data]) => data.password === password)
    .map(([shortId, data]) => ({
      shortUrl: `https://${req.headers.host}/${shortId}`,
      originalUrl: data.originalUrl,
      clicks: data.clicks,
    }));

  res.json(userUrls);  // Return the list of URLs
});

// Delete a URL by password
app.post('/delete', (req, res) => {
  const { shortId, password } = req.body;

  if (!shortId || !password) {
    return res.status(400).json({ error: 'You must provide a shortId and password!' });
  }

  const urlData = urlDatabase[shortId];

  if (urlData && urlData.password === password) {
    delete urlDatabase[shortId];  // Delete URL from the database
    return res.json({ success: true });
  } else {
    return res.status(400).json({ error: 'Invalid password or URL not found!' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
